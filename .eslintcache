[{"/Users/kristian/Documents/kjemi/src/Elements.js":"1","/Users/kristian/Documents/kjemi/src/App.js":"2","/Users/kristian/Documents/kjemi/src/index.js":"3","/Users/kristian/Documents/kjemi/src/Element.js":"4","/Users/kristian/Documents/kjemi/src/SvgOutput.js":"5"},{"size":139992,"mtime":1607424596681,"results":"6","hashOfConfig":"7"},{"size":3393,"mtime":1607796837924,"results":"8","hashOfConfig":"7"},{"size":219,"mtime":1607687431341,"results":"9","hashOfConfig":"7"},{"size":3322,"mtime":1607691800631,"results":"10","hashOfConfig":"7"},{"size":2588,"mtime":1607796864280,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sv4gn8",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kristian/Documents/kjemi/src/Elements.js",[],"/Users/kristian/Documents/kjemi/src/App.js",["23","24"],"/Users/kristian/Documents/kjemi/src/index.js",[],"/Users/kristian/Documents/kjemi/src/Element.js",["25"],"import styled from \"styled-components\"\n\nexport default function Element(props) {\n\tconst element = props.element\n\tconst {\n\t\tcurrentInput,\n\t\tnorwegian,\n\t\tsetIndices,\n\t\toverlapIndices, setOverlapIndices,\n\t\tselectedElements, setSelectedElements,\n\t} = props.allProps\n\n\tfunction getPositionIndices(symbol) {\n\t\tconst inputChars = currentInput.split(\"\")\n\t\treturn inputChars.reduce(function findSymbolOccurrences(indices, current, index, array) {\n\t\t\tif (symbol.length === 1 && current.toLowerCase() === symbol.toLowerCase()) {\n\t\t\t\tindices.push(index)\n\t\t\t}\n\t\t\telse if (symbol.length === 2 && index < array.length - 1) {\n\t\t\t\tconst curr = current.toLowerCase()\n\t\t\t\tconst next = array[index + 1].toLowerCase()\n\t\t\t\tif (curr + next === symbol.toLowerCase()) {\n\t\t\t\t\tindices.push(index)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn indices\n\t\t}, [])\n\t}\n\n\tfunction togglePosition(event, symbol, position) {\n\t\tconst indices = [...Array(symbol.length)].map((_, i) => position + i)\n\n\t\tif (event.target.checked) {\n\t\t\t// Sorted, because otherwise their order depends on when the checkboxes were clicked\n\t\t\tsetIndices(prev => [...prev, position]\n\t\t\t\t.sort((a, b) => a - b)\n\t\t\t)\n\t\t\tsetOverlapIndices(prev => [...prev, ...indices]\n\t\t\t\t.sort((a, b) => a - b)\n\t\t\t)\n\t\t\tsetSelectedElements(prev => {\n\t\t\t\treturn [...prev, { symbol, indices }]\n\t\t\t\t\t.sort((a, b) => a.indices[0] - b.indices[0])\n\t\t\t})\n\t\t} else {\n\t\t\tsetIndices(prev => prev.filter(i => !indices.includes(i)))\n\t\t\tsetOverlapIndices(prev => prev.filter(i => !indices.includes(i)))\n\t\t\tsetSelectedElements(prev => {\n\t\t\t\treturn prev.filter(p => p.indices[0] !== position)\n\t\t\t})\n\t\t}\n\t}\n\n\treturn (\n\t\t<ElementDiv>\n\t\t\t<img src={`/chemical-symbols-in-name/assets/e${String(element.number).padStart(3, \"0\")}.png`} />\n\t\t\t<h2>{norwegian ? element.norsk || element.name : element.name}</h2>\n\t\t\t<p>({element.number}) (<span className=\"symbol\">{element.symbol}</span>)</p>\n\t\t\t<LabelContainer>\n\t\t\t\t{getPositionIndices(element.symbol).map(function displayCheckboxes(index) {\n\t\t\t\t\t// Create an array with either one or two indices, to correctly register two-character symbols \n\t\t\t\t\tconst currentIndices = [...Array(element.symbol.length)].map((_, i) => index + i)\n\t\t\t\t\tconst inactiveClass = currentIndices.some(currentIndex => overlapIndices.includes(currentIndex)) ? \"inactive\" : \"\"\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ElementLabel className={inactiveClass}>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclassName={inactiveClass}\n\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\tinactiveClass === \"inactive\"\n\t\t\t\t\t\t\t\t\t&& overlapIndices.some(i => currentIndices.includes(i))\n\t\t\t\t\t\t\t\t\t&& selectedElements.length >= 1\n\t\t\t\t\t\t\t\t\t&& !selectedElements.some(s => s.symbol === element.symbol && s.indices[0] === index)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tname=\"btn\"\n\t\t\t\t\t\t\t\tonClick={event => togglePosition(event, element.symbol, index)}\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{index + 1}\n\t\t\t\t\t\t</ElementLabel>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</LabelContainer>\n\t\t</ElementDiv>\n\t)\n}\n\nconst ElementDiv = styled.div`\n\tborder: 1px solid #999;\n\tflex: 1;\n\tjustify-content: center;\n\tmin-width: 0;\n\tmin-height: 0;\n\tmax-width: 250px;\n\tmargin: 0 .5rem;\n\tpadding: .5rem;\n\tp, span {\n\t\tfont-size: 1.5vw;\n\t}\n`\n\nconst LabelContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n`\n\nconst ElementLabel = styled.label`\n\tdisplay: flex;\n\tflex: 1;\n\tflex-direction: row;\n\tjustify-content: center;\n\tcursor: pointer;\n\tinput {\n\t\tmin-width: 13px;\n\t}\n`","/Users/kristian/Documents/kjemi/src/SvgOutput.js",["26","27"],{"ruleId":"28","severity":1,"message":"29","line":51,"column":11,"nodeType":"30","messageId":"31","endLine":51,"endColumn":22},{"ruleId":"32","severity":1,"message":"33","line":53,"column":21,"nodeType":"34","messageId":"35","endLine":53,"endColumn":38,"fix":"36"},{"ruleId":"37","severity":1,"message":"38","line":56,"column":4,"nodeType":"39","endLine":56,"endColumn":100},{"ruleId":"28","severity":1,"message":"40","line":1,"column":10,"nodeType":"30","messageId":"31","endLine":1,"endColumn":13},{"ruleId":"28","severity":1,"message":"41","line":16,"column":8,"nodeType":"30","messageId":"31","endLine":16,"endColumn":20},"no-unused-vars","'downloadSVG' is defined but never used.","Identifier","unusedVar","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"42","text":"43"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SVG' is defined but never used.","'svgContainer' is assigned a value but never used.",[1643,1643],"()"]